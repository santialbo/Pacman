// Generated by CoffeeScript 1.6.2
(function() {
  var Game, Level, Sprite, SpriteDict, canvas, game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Sprite = (function() {
    function Sprite(image, info) {
      this.image = image;
      this.info = info;
    }

    Sprite.prototype.width = function() {
      return this.info.sourceSize.w;
    };

    Sprite.prototype.height = function() {
      return this.info.sourceSize.h;
    };

    Sprite.prototype.drawScaled = function(ctx, x, y, scale) {
      x += this.info.spriteSourceSize.x;
      y += this.info.spriteSourceSize.y;
      return ctx.drawImage(this.image, this.info.frame.x, this.info.frame.y, this.info.frame.w, this.info.frame.h, x * scale, y * scale, this.info.frame.w * scale, this.info.frame.h * scale);
    };

    return Sprite;

  })();

  SpriteDict = (function() {
    SpriteDict.prototype.sprite = null;

    SpriteDict.prototype.info = null;

    function SpriteDict(spriteFile, infoFile, callback) {
      var _this = this;

      this.sprite = new Image();
      this.sprite.src = spriteFile;
      $.getJSON(infoFile, function(json) {
        _this.info = json;
        return callback();
      });
    }

    SpriteDict.prototype.get = function(name) {
      return new Sprite(this.sprite, this.info[name]);
    };

    return SpriteDict;

  })();

  Level = (function() {
    Level.prototype.entities = null;

    Level.prototype.cells = null;

    function Level(filename, callback) {
      var _this = this;

      $.get(filename, function(data) {
        _this.cells = (data.split("\n")).map(function(row) {
          return row.split("");
        });
        return callback();
      });
    }

    return Level;

  })();

  Game = (function() {
    Game.prototype.SCALE = 1.5;

    Game.prototype.WIDTH = 224;

    Game.prototype.HEIGHT = 40 + 248 + 20;

    Game.prototype.FPS = 30;

    Game.prototype.SERVER = "ws://localhost:8888/pacman";

    Game.prototype.connection = null;

    Game.prototype.interval = null;

    Game.prototype.sprites = null;

    Game.prototype.level = null;

    function Game(canvas) {
      this.canvas = canvas;
      this.run = __bind(this.run, this);
      this.createEntities = __bind(this.createEntities, this);
      this.loadSprites = __bind(this.loadSprites, this);
      this.setup();
    }

    Game.prototype.setup = function() {
      this.canvas.height = this.HEIGHT * this.SCALE;
      this.canvas.width = this.WIDTH * this.SCALE;
      return this.loadLevel();
    };

    Game.prototype.connect = function() {
      this.connection = new WebSocket(this.SERVER);
      return this.connection.onopen = this.run;
    };

    Game.prototype.loadLevel = function() {
      return this.level = new Level('res/level', this.loadSprites);
    };

    Game.prototype.loadSprites = function() {
      return this.sprites = new SpriteDict('res/sprites.png', 'res/sprites.json', this.createEntities);
    };

    Game.prototype.createEntities = function() {
      return this.connect();
    };

    Game.prototype.run = function() {
      var _this = this;

      return this.interval = setInterval(function() {
        _this.update();
        return _this.draw();
      }, 1000 / this.FPS);
    };

    Game.prototype.update = function() {};

    Game.prototype.draw = function() {
      var ctx;

      ctx = this.canvas.getContext('2d');
      this.drawMaze(ctx);
      return this.drawCookies(ctx);
    };

    Game.prototype.drawMaze = function(ctx) {
      var s;

      ctx.fillStyle = '#000';
      ctx.fillRect(0, 0, this.WIDTH * this.SCALE, this.HEIGHT * this.SCALE);
      s = this.sprites.get("maze");
      return s.drawScaled(ctx, 0, 40, this.SCALE);
    };

    Game.prototype.drawCookies = function(ctx) {
      var b, cols, i, j, l, p, r, rows, s, t, _i, _results;

      s = this.sprites.get("cookie");
      p = this.sprites.get("pill");
      l = 4;
      t = 5;
      b = 268;
      r = 221;
      rows = this.level.cells.length;
      cols = this.level.cells[0].length;
      _results = [];
      for (i = _i = 0; _i < rows; i = _i += 1) {
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (j = _j = 0; _j < cols; j = _j += 1) {
            if (this.level.cells[i][j] === "o") {
              _results1.push(s.drawScaled(ctx, l + (r - l) * j / (cols - 1), 40 + (t + (b - t) * i / (rows - 1)), this.SCALE));
            } else if (this.level.cells[i][j] === "O") {
              _results1.push(p.drawScaled(ctx, l + (r - l) * j / (cols - 1), 40 + (t + (b - t) * i / (rows - 1)), this.SCALE));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Game;

  })();

  canvas = document.getElementById('canvas');

  game = new Game(canvas);

}).call(this);
